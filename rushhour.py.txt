#Look for #IMPLEMENT tags in this file. These tags indicate what has
#to be implemented to complete the warehouse domain.

'''
rushhour STATESPACE
'''
#   You may add only standard python imports---i.e., ones that are automatically
#   available on CDF.
#   You may not remove any imports.
#   You may not import or otherwise source any of your own files

from search import *
from random import randint
from copy import deepcopy

##################################################
# The search space class 'rushhour'             #
# This class is a sub-class of 'StateSpace'      #
##################################################


class rushhour(StateSpace):
    def __init__(self, action, gval, board_size, goal_entrance, goal_direction, vehicle_status, parent=None):
#IMPLEMENT
        """Initialize a rushhour search state object."""
        StateSpace.__init__(self, action, gval, parent);
        self.board_size = board_size;
        self.goal_entrance = goal_entrance;
        self.goal_direction = goal_direction;
        self.vehicle_status = vehicle_status;
        
    def successors(self):
#IMPLEMENT
        '''Return list of rushhour objects that are the successors of the current object'''
        
        '''Find occupied space.'''
        car_parking = [];
        rushhour_objects = [];        
        
        for car in self.vehicle_status:
                        
            if car[3] == True:
                car_end2 = (car[1][0] + car[2] - 1);
                if car_end2 > self.board_size[0] - 1:
                    car_end2 = abs((self.board_size[0] - car[1][0]) - car[2]) - 1; 
                    
                    for num in range(car[1][0], self.board_size[0]):
                        car_parking.append((num, car[1][1]));
                        
                    for num in range(0, car_end2 + 1):
                        car_parking.append((num, car[1][1]));
                else:
                    for num in range(car[1][0], car_end2 + 1):
                        car_parking.append((num, car[1][1]));
            else:
                car_end1 = (car[1][1] + car[2] - 1);
                if car_end1 > self.board_size[1] - 1:
                    car_end1 = abs((self.board_size[1] - car[1][1]) - car[2]) - 1; 
                    
                    for num in range(car[1][1], self.board_size[1]):
                        car_parking.append((car[1][0], num));
                        
                    for num in range(0, car_end1 + 1):
                        car_parking.append((car[1][0], num));                    
                    
                else:
                    for num in range(car[1][1], car_end1 + 1):
                        car_parking.append((car[1][0], num));   
        
        #print(car_parking);
        '''For going west and north.'''     
        for car in self.vehicle_status:
            if car[3] == True: #west
                #if car is at the edge of the board
                    
                if (car[1][0] == 0) and ((self.board_size[0] -1, car[1][1]) not in car_parking):
                    new_parking = [car[0], (self.board_size[0] - 1, car[1][1]), car[2], car[3], car[4]];
                    new_vehiclelist = self.vehicle_status[:];
                    new_vehiclelist.append(new_parking);
                    new_vehiclelist.remove(car);
                    #print("w");
                    #print(new_vehiclelist);
                    rushhour_objects.append(rushhour("move_vehicle(" + car[0] + ", W)", self.gval + 1, self.board_size, self.goal_entrance, self.goal_direction, new_vehiclelist, self));
                    
                #if car is at the middle of the board
                elif ((car[1][0] - 1, car[1][1]) not in car_parking):
                    new_parking = [car[0], (car[1][0] - 1, car[1][1]), car[2], car[3], car[4]];
                    new_vehiclelist = self.vehicle_status[:];
                    new_vehiclelist.append(new_parking);
                    new_vehiclelist.remove(car);
                    #print("w");
                    #print(new_vehiclelist);
                    rushhour_objects.append(rushhour("move_vehicle(" + car[0] + ", W)", self.gval + 1, self.board_size, self.goal_entrance, self.goal_direction, new_vehiclelist, self));
                
            else: #north
                #if car is at the edge of the board
                if (car[1][1] == 0) and ((car[1][0], self.board_size[1] -1) not in car_parking):
                    new_parking = [car[0], (car[1][0], self.board_size[1] - 1), car[2], car[3], car[4]];
                    new_vehiclelist = self.vehicle_status[:];
                    new_vehiclelist.append(new_parking);
                    new_vehiclelist.remove(car);
                    #print("n");
                    #print(new_vehiclelist);
                    rushhour_objects.append(rushhour("move_vehicle(" + car[0] + ", N)", self.gval + 1, self.board_size, self.goal_entrance, self.goal_direction, new_vehiclelist, self));
                    
                # if car is in the middle of the board
                elif ((car[1][0], car[1][1] - 1) not in car_parking):
                    new_parking = [car[0], (car[1][0], car[1][1] - 1), car[2], car[3], car[4]];
                    new_vehiclelist = self.vehicle_status[:];
                    new_vehiclelist.append(new_parking);
                    new_vehiclelist.remove(car);
                    #print("n");
                    #print(new_vehiclelist);
                    rushhour_objects.append(rushhour("move_vehicle(" + car[0] + ", N)", self.gval + 1, self.board_size, self.goal_entrance, self.goal_direction, new_vehiclelist, self));
                            
        
        '''For going east and south.'''     
        for car in self.vehicle_status:
            if car[3] == True: #east
                #at edge of board
                
                car_end = (car[1][0] + car[2] - 1);
                if car_end > self.board_size[0] - 1:
                    car_end = abs((self.board_size[0] - car[1][0]) - car[2]) - 1;                
                
                #print(car_end);
                if ((car[1][0] + car[2] - 1) >= self.board_size[0]) and ((0, car_end + 1) not in car_parking):
                    new_parking = [car[0], (0, car[1][1]), car[2], car[3], car[4]];
                    new_vehiclelist = self.vehicle_status[:];
                    new_vehiclelist.append(new_parking);
                    new_vehiclelist.remove(car);
                    #print("ee");
                    #print(new_vehiclelist);
                    rushhour_objects.append(rushhour("move_vehicle(" + car[0] + ", E)", self.gval + 1, self.board_size, self.goal_entrance, self.goal_direction, new_vehiclelist, self));   
                    
                #middle of board
                elif ((car_end + 1, car[1][1]) not in car_parking):
                    new_parking = [car[0], (car[1][0] + 1, car[1][1]), car[2], car[3], car[4]];
                    new_vehiclelist = self.vehicle_status[:];
                    new_vehiclelist.append(new_parking);
                    new_vehiclelist.remove(car);
                    #print("em");
                    #print(new_vehiclelist);
                    rushhour_objects.append(rushhour("move_vehicle(" + car[0] + ", E)", self.gval + 1, self.board_size, self.goal_entrance, self.goal_direction, new_vehiclelist, self));
 
            else: #south
                #edge of the board
                
                car_end = (car[1][1] + car[2] - 1);
                if car_end > self.board_size[1] - 1:
                    car_end = abs((self.board_size[1] - car[1][1]) - car[2]) - 1;        
                
                #print(car_end);
                
                if ((car[1][1] + car[2] - 1) >= self.board_size[1]) and ((car_end + 1, 0) not in car_parking):
                    new_parking = [car[0], (car[1][0], 0), car[2], car[3], car[4]];
                    new_vehiclelist = self.vehicle_status[:];
                    new_vehiclelist.append(new_parking);
                    new_vehiclelist.remove(car);  
                    #print("swq");
                    #print(new_vehiclelist);
                    rushhour_objects.append(rushhour("move_vehicle(" + car[0] + ", S)", self.gval + 1, self.board_size, self.goal_entrance, self.goal_direction, new_vehiclelist, self));  
                    
                #middle of board
                elif ((car[1][0], car_end + 1) not in car_parking):
                    new_parking = [car[0], (car[1][0], car[1][1] + 1), car[2], car[3], car[4]];
                    new_vehiclelist = self.vehicle_status[:];
                    new_vehiclelist.append(new_parking);
                    new_vehiclelist.remove(car);  
                    #print("s");
                    #print(new_vehiclelist);
                    rushhour_objects.append(rushhour("move_vehicle(" + car[0] + ", S)", self.gval + 1, self.board_size, self.goal_entrance, self.goal_direction, new_vehiclelist, self));
                    
        return rushhour_objects;
    
    def hashable_state(self):
#IMPLEMENT
        '''Return a data item that can be used as a dictionary key to UNIQUELY represent the state.'''
        sorted_veh = sorted(deepcopy(self.vehicle_status));
        vehicle_tup = [tuple(car) for car in sorted_veh];
        return tuple(vehicle_tup);

    def print_state(self):
        #DO NOT CHANGE THIS FUNCTION---it will be used in auto marking
        #and in generating sample trace output.
        #Note that if you implement the "get" routines
        #(rushhour.get_vehicle_statuses() and rushhour.get_board_size())
        #properly, this function should work irrespective of how you represent
        #your state.

        if self.parent:
            print("Action= \"{}\", S{}, g-value = {}, (From S{})".format(self.action, self.index, self.gval, self.parent.index))
        else:
            print("Action= \"{}\", S{}, g-value = {}, (Initial State)".format(self.action, self.index, self.gval))

        print("Vehicle Statuses")
        for vs in sorted(self.get_vehicle_statuses()):
            print("    {} is at ({}, {})".format(vs[0], vs[1][0], vs[1][1]), end="")
        board = get_board(self.get_vehicle_statuses(), self.get_board_properties())
        print('\n')
        print('\n'.join([''.join(board[i]) for i in range(len(board))]))

#Data accessor routines.

    def get_vehicle_statuses(self):
#IMPLEMENT
        '''Return list containing the status of each vehicle
           This list has to be in the format: [vs_1, vs_2, ..., vs_k]
           with one status list for each vehicle in the state.
           Each vehicle status item vs_i is itself a list in the format:
                 [<name>, <loc>, <length>, <is_horizontal>, <is_goal>]
           Where <name> is the name of the robot (a string)
                 <loc> is a location (a pair (x,y)) indicating the front of the vehicle,
                       i.e., its length is counted in the positive x- or y-direction
                       from this point
                 <length> is the length of that vehicle
                 <is_horizontal> is true iff the vehicle is oriented horizontally
                 <is_goal> is true iff the vehicle is a goal vehicle
        '''
        return self.vehicle_status;
        
    def get_board_properties(self):
#IMPLEMENT
        '''Return (board_size, goal_entrance, goal_direction)
           where board_size = (m, n) is the dimensions of the board (m rows, n columns)
                 goal_entrance = (x, y) is the location of the goal
                 goal_direction is one of 'N', 'E', 'S' or 'W' indicating
                                the orientation of the goal
        '''
        return(self.board_size, self.goal_entrance, self.goal_direction);
    
#############################################
# heuristics                                #
#############################################


def heur_zero(state):
    '''Zero Heuristic use to make A* search perform uniform cost search'''
    return 0;


def heur_min_moves(state):
#IMPLEMENT
    '''rushhour heuristic'''
    #We want an admissible heuristic. Getting to the goal requires
    #one move for each tile of distance.
    #Since the board wraps around, there are two different
    #directions that lead to the goal.
    #NOTE that we want an estimate of the number of ADDITIONAL
    #     moves required from our current state
    #1. Proceeding in the first direction, let MOVES1 =
    #   number of moves required to get to the goal if it were unobstructed
    #2. Proceeding in the second direction, let MOVES2 =
    #   number of moves required to get to the goal if it were unobstructed
    #
    #Our heuristic value is the minimum of MOVES1 and MOVES2 over all goal vehicles.
    #You should implement this heuristic function exactly, even if it is
    #tempting to improve it.
    goal_vehicles = [];
    goal_moves = [];
    
    for car in state.vehicle_status:
        if car[-1] == True:
            goal_vehicles.append(car);
    
    for car in goal_vehicles: 
        if car[3] == True: #horizontal
            if car[1][1] == state.goal_entrance[1]: #check if possible
                
                car_end = (car[1][0] + car[2] - 1);
                if car_end > state.board_size[0] - 1:
                    car_end = abs((state.board_size[0] - car[1][0]) - car[2]) - 1;
                    
                if (car[1][0] == state.goal_entrance[0] or car_end == state.goal_entrance[0]):
                    #print('in hor 0');
                    goal_moves.append(0);
                else:                  
                    if (car[1][0] < state.goal_entrance[0]): #west
                        #print('in move1 bigger');
                        move1  = abs(car[1][0] + (state.board_size[0] - state.goal_entrance[0]));
                    else: 
                        #print('in move1 smaller');
                        move1 = abs(car[1][0] - state.goal_entrance[0]);
                    
                    if (car_end < state.goal_entrance[0]): #east
                        #print('in move2 bigger');
                        move2 = abs(car_end - state.goal_entrance[0]);
                    else:
                        #print('in move2 smaller');
                        move2 = abs(car_end - state.board_size[0]) + state.goal_entrance[0];
                        
                    goal_moves.append(move1);
                    goal_moves.append(move2);
            else:
                return float('inf');
        else: #vertical
            if car[1][0] == state.goal_entrance[0]: #check if possible  
                
                car_end = (car[1][1] + car[2] - 1);
                if car_end > state.board_size[1] - 1:
                    car_end = abs((state.board_size[1] - car[1][1]) - car[2]) - 1;                
                
                if (car[1][1] == state.goal_entrance[1] or car_end == state.goal_entrance[1]):
                    #print('in vert 0');
                    goal_moves.append(0);
                else:
                    if car_end > state.goal_entrance[1]: #south
                        #print('in move1 bigger');
                        move1  = abs(car_end - state.board_size[1]) + state.goal_entrance[1];
                        #print(move1);
                    else:
                        #print('in move1 smaller');
                        move1 = abs(state.goal_entrance[1] - car_end);
                    
                    if (car[1][1] > state.goal_entrance[1]): #north
                        #print('in move2 bigger');
                        move2 = abs(car[1][1] - state.goal_entrance[1]);
                    else:
                        #print('in move2 smaller');
                        move2 = abs(car[1][1] + (state.board_size[1] - state.goal_entrance[1]));
                
                    goal_moves.append(move1);
                    goal_moves.append(move2);  
            else:
                return float('inf');
    #print(goal_moves);
    return min(goal_moves);

def rushhour_goal_fn(state):
#IMPLEMENT
    '''Have we reached a goal state'''
    goal_cars = [];
    result = [];
    
    for car in state.vehicle_status:
        if car[-1] == True:
            goal_cars.append(car);
    
    if state.goal_direction == 'E':
        for car in goal_cars:
            car_end = (car[1][0] + car[2] - 1);
            if car_end > state.board_size[0] - 1:
                car_end = abs((state.board_size[0] - car[1][0]) - car[2]) - 1;
                
            if (car_end == state.goal_entrance[0]) and (car[1][1] == state.goal_entrance[1]):
                return True;
        return False;
    elif state.goal_direction == 'W':
        for car in goal_cars:
            if (car[1][0] == state.goal_entrance[0]) and (car[1][1] == state.goal_entrance[1]):
                return True;
        return False;
    elif state.goal_direction == 'N':
        for car in goal_cars:
            if (car[1][1] == state.goal_entrance[1]) and (car[1][0] == state.goal_entrance[0]):
                return True;
        return False;
    elif state.goal_direction == 'S':
        for car in goal_cars:
            car_end = (car[1][1] + car[2] - 1);
            if car_end > state.board_size[1] - 1:
                car_end = abs((state.board_size[1] - car[1][1]) - car[2]) - 1; 
                
            if (car_end == state.goal_entrance[1]) and (car[1][0] == state.goal_entrance[0]):
                return True;
        return False;

def make_init_state(board_size, vehicle_list, goal_entrance, goal_direction):
#IMPLEMENT
    '''Input the following items which specify a state and return a rushhour object
       representing this initial state.
         The state's its g-value is zero
         The state's parent is None
         The state's action is the dummy action "START"
       board_size = (m, n)
          m is the number of rows in the board
          n is the number of columns in the board
       vehicle_list = [v1, v2, ..., vk]
          a list of vehicles. Each vehicle vi is itself a list
          vi = [vehicle_name, (x, y), length, is_horizontal, is_goal] where
              vehicle_name is the name of the vehicle (string)
              (x,y) is the location of that vehicle (int, int)
              length is the length of that vehicle (int)
              is_horizontal is whether the vehicle is horizontal (Boolean)
              is_goal is whether the vehicle is a goal vehicle (Boolean)
      goal_entrance is the coordinates of the entrance tile to the goal and
      goal_direction is the orientation of the goal ('N', 'E', 'S', 'W')

   NOTE: for simplicity you may assume that
         (a) no vehicle name is repeated
         (b) all locations are integer pairs (x,y) where 0<=x<=n-1 and 0<=y<=m-1
         (c) vehicle lengths are positive integers
    '''
    return rushhour("START", 0, board_size, goal_entrance, goal_direction, vehicle_list, None);
    
########################################################
#   Functions provided so that you can more easily     #
#   Test your implementation                           #
########################################################


def get_board(vehicle_statuses, board_properties):
    #DO NOT CHANGE THIS FUNCTION---it will be used in auto marking
    #and in generating sample trace output.
    #Note that if you implement the "get" routines
    #(rushhour.get_vehicle_statuses() and rushhour.get_board_size())
    #properly, this function should work irrespective of how you represent
    #your state.
    (m, n) = board_properties[0]
    board = [list(['.'] * n) for i in range(m)]
    for vs in vehicle_statuses:
        for i in range(vs[2]):  # vehicle length
            if vs[3]:
                # vehicle is horizontal
                board[vs[1][1]][(vs[1][0] + i) % n] = vs[0][0]
                # represent vehicle as first character of its name
            else:
                # vehicle is vertical
                board[(vs[1][1] + i) % m][vs[1][0]] = vs[0][0]
                # represent vehicle as first character of its name
    # print goal
    board[board_properties[1][1]][board_properties[1][0]] = board_properties[2]
    return board


def make_rand_init_state(nvehicles, board_size):
    '''Generate a random initial state containing
       nvehicles = number of vehicles
       board_size = (m,n) size of board
       Warning: may take a long time if the vehicles nearly
       fill the entire board. May run forever if finding
       a configuration is infeasible. Also will not work any
       vehicle name starts with a period.

       You may want to expand this function to create test cases.
    '''

    (m, n) = board_size
    vehicle_list = []
    board_properties = [board_size, None, None]
    for i in range(nvehicles):
        if i == 0:
            # make the goal vehicle and goal
            x = randint(0, n - 1)
            y = randint(0, m - 1)
            is_horizontal = True if randint(0, 1) else False
            vehicle_list.append(['gv', (x, y), 2, is_horizontal, True])
            if is_horizontal:
                board_properties[1] = ((x + n // 2 + 1) % n, y)
                board_properties[2] = 'W' if randint(0, 1) else 'E'
            else:
                board_properties[1] = (x, (y + m // 2 + 1) % m)
                board_properties[2] = 'N' if randint(0, 1) else 'S'
        else:
            board = get_board(vehicle_list, board_properties)
            conflict = True
            while conflict:
                x = randint(0, n - 1)
                y = randint(0, m - 1)
                is_horizontal = True if randint(0, 1) else False
                length = randint(2, 3)
                conflict = False
                for j in range(length):  # vehicle length
                    if is_horizontal:
                        if board[y][(x + j) % n] != '.':
                            conflict = True
                            break
                    else:
                        if board[(y + j) % m][x] != '.':
                            conflict = True
                            break
            vehicle_list.append([str(i), (x, y), length, is_horizontal, False])

    return make_init_state(board_size, vehicle_list, board_properties[1], board_properties[2])


def test(nvehicles, board_size):
    s0 = make_rand_init_state(nvehicles, board_size)
    se = SearchEngine('astar', 'full')
    #se.trace_on(2)
    final = se.search(s0, rushhour_goal_fn, heur_min_moves)
